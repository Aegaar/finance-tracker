generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Income {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  amount      Decimal      @db.Decimal(11, 2)
  slug        String       @unique
  description String       @db.Text
  source      IncomeSource @default(SALARY)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userEmail   String
  user        User         @relation(fields: [userEmail], references: [email])
}

model Expense {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  slug        String        @unique
  amount      Decimal       @db.Decimal(11, 2)
  description String        @db.Text
  source      ExpenseSource @default(GROCERIES)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userEmail   String
  user        User          @relation(fields: [userEmail], references: [email])
}

enum IncomeSource {
  SALARY
  FREELANCING
  INVESTMENTS
  STOCKS
  BANK_TRANSFERS
  OTHER
}

enum ExpenseSource {
  EDUCATION
  GROCERIES
  HEALTH
  SUBSCRIPTIONS
  CLOTHING
  TRAVELING
  OTHER
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Income        Income[]

  Expense Expense[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
